# 履职系统重构与优化方案

## 一、需求分析

### 1. 系统角色与权限

#### 1.1 用户角色定义
1. **移动端用户**
   - 理事：参与理事会议和学术会议
   - 常务理事：参与常务理事会议、理事会议和学术会议
   - 监事：参与监事会议和理事会议
   - 分支机构负责人：参与分支机构相关会议
   - 地方学会负责人：参与地方学会相关会议

2. **管理端用户**
   - 学会管理员：拥有系统所有功能权限

#### 1.2 权限控制
1. **移动端权限**
   - 登录验证：手机号或账号密码登录
   - 角色权限：不同角色能查看不同类型的会议统计
   - 委托权限：仅理事、常务理事、监事可使用委托功能

2. **管理端权限**
   - 登录验证：管理员账号密码登录
   - 功能权限：所有管理功能的访问权限

### 2. 功能模块需求

#### 2.1 移动端功能需求

##### 2.1.1 登录页面
1. **功能组件**
   - 登录表单
     - 支持手机号验证码登录
     - 支持账号密码登录
   - 提交按钮
   - 验证码获取按钮
   - 错误提示模块

2. **业务流程**
   - 用户输入登录信息
   - 系统验证登录信息
   - 登录成功重定向到首页
   - 登录失败显示错误信息

3. **交互设计**
   - 输入框即时验证（手机号格式、密码长度）
   - 提交按钮状态变化（默认、加载中）
   - 验证码倒计时显示

##### 2.1.2 首页
1. **功能组件**
   - 欢迎信息展示
   - 功能导航入口
     - 履职统计入口
     - 学术会议入口
   - 用户信息显示
   - 退出登录入口

2. **业务流程**
   - 加载用户个人信息
   - 显示功能入口
   - 点击导航跳转到对应功能页面

3. **交互设计**
   - 功能卡片式布局设计
   - 点击卡片时的动画效果
   - 统一的设计风格（苹果设计风格）

##### 2.1.3 会议报名页面
1. **功能组件**
   - 会议信息卡片
     - 会议名称
     - 会议时间
     - 会议地点
   - 身份选择模块
     - 角色下拉菜单
   - 基础信息表单
     - 姓名输入框
     - 手机号输入框
     - 单位名称输入框
     - 单位职务输入框
     - 学会职务输入框
   - 出席方式选择（理事、常务理事、监事可见）
     - 本人出席/委托代表出席选择
   - 委托信息表单（选择委托时显示）
     - 被委托人姓名输入框
     - 被委托人手机号输入框
     - 被委托人单位名称输入框
     - 被委托人单位职务输入框
   - 提交按钮
   - 验证提示模块
     - 表单验证错误提示
     - 身份验证错误提示
     - 重复报名确认提示

2. **业务流程**
   - 用户通过扫描二维码进入报名页面（无需登录）
   - 页面获取会议ID并加载会议信息
   - 用户选择身份角色
   - 填写基本信息
   - 选择出席方式（可委托角色）
   - 如选择委托，填写委托信息
   - 提交表单前进行验证：
     - 验证姓名和手机号是否与系统内用户信息匹配
     - 验证是否已经报名过此次会议
   - 提交处理逻辑：
     - 如姓名和手机号不匹配系统用户信息，显示错误提示："姓名或手机号码错误，请更正后重试"
     - 如已报名过此次会议，弹出确认提示："XXX已经报名此次会议，重新提交会覆盖先前的报名信息，是否确定？"
       - 用户确认后，更新报名信息
       - 用户取消后，返回编辑状态
     - 验证通过且无重复报名（或确认覆盖），提交表单数据
   - 成功后跳转到成功页面

3. **交互设计**
   - 表单分步骤填写（先选角色，再填写其他信息）
   - 实时表单验证与错误提示
   - 委托信息区域动态显示/隐藏
   - 提交按钮状态管理
   - 焦点自动定位到错误字段

4. **数据验证规则**
   - 姓名/被委托人姓名：至少2个字符
   - 手机号/被委托人手机号：必须符合11位中国手机号格式（正则：^1[3-9]\\d{9}$）
   - 单位名称/被委托人单位名称：至少2个字符
   - 单位职务/被委托人单位职务：至少2个字符
   - 学会职务：至少2个字符
   - 所有必填字段不能为空
   - 身份验证：姓名和手机号必须与系统内用户信息匹配

5. **安全与数据处理**
   - 无需登录即可访问，但表单提交前进行身份校验
   - 支持重复报名覆盖机制，保留报名历史记录
   - 对姓名和手机号进行加密传输，保护用户隐私

##### 2.1.4 报名成功页面
1. **功能组件**
   - 成功提示
     - 成功图标
     - 成功标题
     - 成功描述
   - 会议信息展示
     - 会议名称
     - 会议时间
     - 会议地点
   - 报名信息展示
     - 姓名
     - 手机号码
     - 单位名称
     - 单位职务
     - 出席方式
   - 委托信息展示（如有）
     - 被委托人姓名
     - 被委托人手机号码
     - 被委托人单位名称
     - 被委托人单位职务
   - 重新报名按钮
   - 返回首页按钮

2. **业务流程**
   - 从URL参数获取会议ID
   - 加载报名成功的信息
   - 显示会议和报名详情
   - 根据出席方式决定是否显示委托信息

3. **交互设计**
   - 成功图标动画效果
   - 信息卡片式展示
   - 按钮转场效果

##### 2.1.5 履职统计页面
1. **功能组件**
   - 顶部导航栏
     - 返回按钮
     - 页面标题
   - 履职情况统计卡片
     - 常务理事会议次数（常务理事可见）
     - 理事会议次数（理事和常务理事可见）
     - 学术会议次数（所有角色可见）
   - 参会记录列表
     - 会议类型标签
     - 会议名称
     - 会议时间
     - 会议地点
     - 出席方式
   - 时间筛选器
     - 年份选择
     - 月份范围选择

2. **业务流程**
   - 加载用户信息和角色
   - 根据角色加载对应的会议统计
   - 加载参会记录列表
   - 支持时间筛选

3. **交互设计**
   - 统计数据卡片式展示
   - 会议记录卡片滚动列表
   - 会议类型以标签形式显示
   - 下拉刷新功能

##### 2.1.6 个人中心页面
1. **功能组件**
   - 用户基本信息
     - 姓名
     - 手机号
     - 工作单位
     - 单位职务
     - 学会职务
   - 退出登录按钮

2. **业务流程**
   - 加载用户个人信息
   - 显示用户基本资料
   - 退出登录功能

3. **交互设计**
   - 信息卡片式布局
   - 退出登录确认对话框

##### 2.1.7 学术会议页面
1. **功能组件**
   - 顶部导航栏
   - 学术会议列表
     - 会议名称
     - 会议时间
     - 会议地点
   - 会议申报入口

2. **业务流程**
   - 加载学术会议列表
   - 展示会议信息
   - 提供申报入口

3. **交互设计**
   - 列表项卡片式设计
   - 滚动加载更多

#### 2.2 管理端功能需求

##### 2.2.1 登录页面
1. **功能组件**
   - 登录表单
     - 用户名输入框
     - 密码输入框
   - 记住我选项
   - 登录按钮
   - 错误提示模块

2. **业务流程**
   - 管理员输入登录信息
   - 系统验证管理员身份
   - 登录成功重定向到管理主页
   - 登录失败显示错误信息

3. **交互设计**
   - 输入框验证反馈
   - 登录按钮状态变化
   - 登录过程加载状态

##### 2.2.2 布局组件
1. **功能组件**
   - 左侧菜单
     - 账号管理
     - 会议管理
     - 学术会议管理
     - 报名信息管理
     - 履职统计
   - 顶部导航
     - 面包屑导航
     - 用户信息
     - 退出按钮
   - 内容区域

2. **业务流程**
   - 根据用户权限显示菜单项
   - 菜单项点击切换内容区域
   - 面包屑导航反映当前位置

3. **交互设计**
   - 菜单高亮显示当前页面
   - 响应式布局（小屏幕菜单收起）
   - 固定顶部导航和左侧菜单

##### 2.2.3 账号管理页面
1. **功能组件**
   - 搜索模块
     - 姓名/手机号搜索框
     - 搜索按钮
   - 操作按钮区
     - 新建账号按钮
     - 批量导入按钮
     - 导出按钮
   - 账号列表表格
     - 姓名列
     - 手机号码列
     - 学会职务列
     - 工作单位列
     - 工作职务列
     - 最后登录时间列
     - 操作列（编辑、删除、修改密码）
   - 分页控件
   - 账号创建/编辑模态框
     - 姓名输入框
     - 手机号码输入框
     - 密码输入框（创建时）
     - 确认密码输入框（创建时）
     - 学会职务选择框
     - 工作单位输入框
     - 工作职务输入框
   - 密码修改模态框
   - 删除确认模态框

2. **业务流程**
   - 加载账号列表数据
   - 支持搜索筛选
   - 创建新账号
   - 编辑账号信息
   - 修改账号密码
   - 删除账号（软删除）
   - 批量导入账号
   - 导出账号数据

3. **交互设计**
   - 表格行悬停效果
   - 模态框动画效果
   - 表单验证反馈
   - 操作成功/失败提示

4. **数据验证规则**
   - 姓名：必填，2-20个字符
   - 手机号：必填，符合手机号格式
   - 密码：必填，8-20个字符，包含字母和数字
   - 确认密码：必填，与密码一致
   - 学会职务：必填
   - 工作单位：必填，2-50个字符
   - 工作职务：必填，2-30个字符

##### 2.2.4 会议管理页面
1. **功能组件**
   - 搜索筛选区
     - 会议名称搜索框
     - 时间范围选择器
     - 会议类型选择器
     - 搜索按钮
     - 重置按钮
   - 操作按钮区
     - 创建会议按钮
     - 批量导入按钮
   - 会议列表表格
     - 会议类型列
     - 会议形式列
     - 会议名称列
     - 会议时间列
     - 会议地点列
     - 更新时间列
     - 报名状态列（开关控件）
     - 操作列（编辑、删除、生成二维码）
   - 分页控件
   - 会议创建/编辑模态框
     - 会议类型选择框
     - 会议形式选择框
     - 会议名称输入框
     - 会议时间选择器
     - 会议地点输入框
   - 二维码展示模态框
     - 二维码图像
     - 下载按钮
     - 会议信息显示
   - 删除确认模态框

2. **业务流程**
   - 加载会议列表数据
   - 支持多条件搜索筛选
   - 创建新会议
   - 编辑会议信息
   - 删除会议
   - 控制会议报名状态
   - 生成会议二维码
   - 下载二维码图片

3. **交互设计**
   - 表格行悬停效果
   - 开关组件动画效果
   - 模态框展示效果
   - 操作成功/失败提示

4. **数据验证规则**
   - 会议类型：必选
   - 会议形式：必选
   - 会议名称：必填，5-50个字符
   - 会议时间：必填，有效的日期时间
   - 会议地点：必填，5-100个字符

##### 2.2.5 学术会议管理页面
1. **功能组件**
   - 搜索筛选区
     - 会议名称搜索框
     - 搜索按钮
     - 重置按钮
   - 操作按钮区
     - 创建会议按钮
     - 批量导入按钮
     - 导出按钮
   - 学术会议列表表格
     - 会议名称列
     - 开始时间列
     - 结束时间列
     - 会议地点列
     - 更新时间列
     - 操作列（编辑、删除）
   - 分页控件
   - 学术会议创建/编辑模态框
     - 会议名称输入框
     - 开始时间选择器
     - 结束时间选择器
     - 会议地点输入框
   - 删除确认模态框

2. **业务流程**
   - 加载学术会议列表
   - 支持会议名称搜索
   - 创建新学术会议
   - 编辑学术会议信息
   - 删除学术会议
   - 导入/导出学术会议数据

3. **交互设计**
   - 表格行悬停效果
   - 模态框展示效果
   - 时间选择器联动（结束时间不早于开始时间）
   - 操作成功/失败提示

4. **数据验证规则**
   - 会议名称：必填，5-50个字符
   - 开始时间：必填，有效的日期时间
   - 结束时间：必填，不早于开始时间
   - 会议地点：必填，5-100个字符

##### 2.2.6 报名信息管理页面
1. **功能组件**
   - 会议选择下拉框
   - 搜索筛选区
     - 姓名/手机号搜索框
     - 搜索按钮
     - 重置按钮
   - 操作按钮区
     - 导出按钮
   - 报名信息列表表格
     - 姓名列
     - 手机号码列
     - 出席类型列
     - 学会职务列
     - 工作单位列
     - 工作职务列
     - 被委托人信息列（条件显示）
     - 审核状态列
     - 备注列
     - 操作列（详情、审核）
   - 分页控件
   - 报名详情模态框
     - 基本信息区域
     - 委托信息区域（如有）
     - 会议信息区域
   - 审核操作模态框
     - 审核状态选择（通过/拒绝）
     - 备注输入框

2. **业务流程**
   - 选择会议加载对应报名信息
   - 支持姓名/手机号搜索
   - 查看报名详情
   - 审核报名信息
   - 导出报名数据

3. **交互设计**
   - 表格行悬停效果
   - 审核状态颜色区分（待审核、已通过、已拒绝）
   - 详情模态框信息分区展示
   - 操作成功/失败提示

4. **数据验证规则**
   - 会议选择：必选
   - 审核备注：选填，0-200个字符

##### 2.2.7 履职统计-个人履职统计页面
1. **功能组件**
   - 搜索筛选区
     - 姓名/手机号搜索框
     - 时间范围选择器
     - 会议类型筛选下拉框
     - 搜索按钮
     - 重置按钮
   - 操作按钮区
     - 导出按钮
   - 个人履职统计表格
     - 姓名列
     - 手机号码列
     - 学会职务列
     - 工作单位列
     - 工作职务列
     - 常务理事会议次数列
     - 理事会议次数列
     - 学术会议次数列
     - 操作列（详情）
   - 分页控件
   - 个人履职详情模态框
     - 个人基本信息区域
     - 会议参与记录列表
       - 会议名称
       - 会议类型
       - 会议时间
       - 会议地点
       - 出席方式
     - 导出按钮

2. **业务流程**
   - 加载个人履职统计数据
   - 支持多条件筛选
   - 查看个人履职详情
   - 导出统计数据和详情

3. **交互设计**
   - 表格行悬停效果
   - 会议次数突出显示
   - 详情模态框信息分区展示
   - 操作成功/失败提示

##### 2.2.8 履职统计-会议履职统计页面
1. **功能组件**
   - 搜索筛选区
     - 会议名称搜索框
     - 时间范围选择器
     - 会议类型筛选下拉框
     - 搜索按钮
     - 重置按钮
   - 操作按钮区
     - 导出按钮
   - 会议履职统计表格
     - 会议名称列
     - 会议类型列
     - 会议时间列
     - 会议地点列
     - 报名人数列
     - 本人出席人数列
     - 委托出席人数列
     - 出席率列
     - 操作列（详情）
   - 分页控件
   - 会议履职详情模态框
     - 会议基本信息区域
     - 出席率和人数统计图表
     - 参会人员列表
       - 姓名
       - 手机号码
       - 学会职务
       - 工作单位
       - 出席方式
     - 导出参会人员按钮

2. **业务流程**
   - 加载会议履职统计数据
   - 支持多条件筛选
   - 查看会议履职详情
   - 导出统计数据和参会人员名单

3. **交互设计**
   - 表格行悬停效果
   - 出席率颜色区分（高/中/低）
   - 统计图表可视化展示
   - 详情模态框信息分区展示
   - 操作成功/失败提示

### 3. 数据接口需求

#### 3.1 移动端接口

##### 3.1.1 认证接口
1. **登录接口**
   - 路径：`/api/auth/login`
   - 方法：POST
   - 参数：
     - 手机号验证码登录：`{phone, verificationCode}`
     - 账号密码登录：`{phone, password}`
   - 响应：`{success, token, user}`

2. **获取验证码接口**
   - 路径：`/api/auth/verification-code`
   - 方法：POST
   - 参数：`{phone}`
   - 响应：`{success, message}`

3. **检查登录状态接口**
   - 路径：`/api/auth/check`
   - 方法：GET
   - 参数：无（使用Authorization头）
   - 响应：`{authenticated, user}`

4. **退出登录接口**
   - 路径：`/api/auth/logout`
   - 方法：POST
   - 参数：无（使用Authorization头）
   - 响应：`{success}`

##### 3.1.2 会议报名接口
1. **获取会议信息接口**
   - 路径：`/api/meetings/:id`
   - 方法：GET
   - 参数：会议ID（路径参数）
   - 响应：`{id, name, start_time, end_time, location, type, form}`

2. **提交报名接口**
   - 路径：`/api/registrations`
   - 方法：POST
   - 参数：
     ```
     {
       meeting_id,
       name,
       phone,
       work_unit,
       work_position,
       society_position,
       attend_type,
       delegate_name,
       delegate_phone,
       delegate_unit,
       delegate_position
     }
     ```
   - 响应：`{success, registration_id}`

3. **获取报名成功信息接口**
   - 路径：`/api/registrations/:id`
   - 方法：GET
   - 参数：报名ID（路径参数）
   - 响应：报名信息和会议信息

4. **验证用户身份接口**
   - 路径：`/api/user-verification`
   - 方法：POST
   - 参数：`{name, phone}`
   - 响应：`{valid, message}`
   - 描述：验证姓名和手机号是否与系统内用户信息匹配

5. **检查重复报名接口**
   - 路径：`/api/registrations/check-duplicate`
   - 方法：POST
   - 参数：`{meeting_id, name, phone}`
   - 响应：`{exists, registration_id, registration_data}`
   - 描述：检查用户是否已经报名过指定会议，若已报名则返回报名ID和报名数据

##### 3.1.3 履职统计接口
1. **获取个人履职统计接口**
   - 路径：`/api/statistics/personal`
   - 方法：GET
   - 参数：
     - 查询参数：`{start_date, end_date}`
     - 授权：Authorization头
   - 响应：各类会议次数统计

2. **获取个人参会记录接口**
   - 路径：`/api/statistics/personal/meetings`
   - 方法：GET
   - 参数：
     - 查询参数：`{start_date, end_date}`
     - 授权：Authorization头
   - 响应：参会记录列表

##### 3.1.4 个人信息接口
1. **获取用户信息接口**
   - 路径：`/api/users/profile`
   - 方法：GET
   - 参数：授权：Authorization头
   - 响应：用户个人信息

##### 3.1.5 学术会议接口
1. **获取学术会议列表接口**
   - 路径：`/api/academic-meetings`
   - 方法：GET
   - 参数：查询参数：`{page, per_page}`
   - 响应：学术会议列表

#### 3.2 管理端接口

##### 3.2.1 认证接口
1. **管理员登录接口**
   - 路径：`/api/admin/auth/login`
   - 方法：POST
   - 参数：`{username, password, remember}`
   - 响应：`{success, token, admin}`

2. **检查管理员登录状态接口**
   - 路径：`/api/admin/auth/check`
   - 方法：GET
   - 参数：无（使用Authorization头）
   - 响应：`{authenticated, admin}`

3. **管理员退出登录接口**
   - 路径：`/api/admin/auth/logout`
   - 方法：POST
   - 参数：无（使用Authorization头）
   - 响应：`{success}`

##### 3.2.2 账号管理接口
1. **获取账号列表接口**
   - 路径：`/api/admin/users`
   - 方法：GET
   - 参数：查询参数：`{page, per_page, search, sort_by, sort_order}`
   - 响应：账号列表和分页信息

2. **创建账号接口**
   - 路径：`/api/admin/users`
   - 方法：POST
   - 参数：账号信息
   - 响应：`{success, user}`

3. **更新账号接口**
   - 路径：`/api/admin/users/:id`
   - 方法：PUT
   - 参数：更新的账号信息
   - 响应：`{success}`

4. **删除账号接口**
   - 路径：`/api/admin/users/:id`
   - 方法：DELETE
   - 参数：账号ID（路径参数）
   - 响应：`{success}`

5. **修改密码接口**
   - 路径：`/api/admin/users/:id/password`
   - 方法：PUT
   - 参数：`{password, confirm_password}`
   - 响应：`{success}`

6. **批量导入账号接口**
   - 路径：`/api/admin/users/import`
   - 方法：POST
   - 参数：文件上传
   - 响应：`{success, imported_count, failed_count, errors}`

7. **导出账号接口**
   - 路径：`/api/admin/users/export`
   - 方法：GET
   - 参数：查询参数：`{search, sort_by, sort_order}`
   - 响应：Excel文件下载

##### 3.2.3 会议管理接口
1. **获取会议列表接口**
   - 路径：`/api/admin/meetings`
   - 方法：GET
   - 参数：查询参数：`{page, per_page, search, start_date, end_date, type, sort_by, sort_order}`
   - 响应：会议列表和分页信息

2. **创建会议接口**
   - 路径：`/api/admin/meetings`
   - 方法：POST
   - 参数：会议信息
   - 响应：`{success, meeting}`

3. **更新会议接口**
   - 路径：`/api/admin/meetings/:id`
   - 方法：PUT
   - 参数：更新的会议信息
   - 响应：`{success}`

4. **删除会议接口**
   - 路径：`/api/admin/meetings/:id`
   - 方法：DELETE
   - 参数：会议ID（路径参数）
   - 响应：`{success}`

5. **控制报名状态接口**
   - 路径：`/api/admin/meetings/:id/registration-status`
   - 方法：PUT
   - 参数：`{is_registration_open}`
   - 响应：`{success}`

6. **生成会议二维码接口**
   - 路径：`/api/admin/meetings/:id/qrcode`
   - 方法：GET
   - 参数：会议ID（路径参数）
   - 响应：二维码图片或数据

7. **批量导入会议接口**
   - 路径：`/api/admin/meetings/import`
   - 方法：POST
   - 参数：文件上传
   - 响应：`{success, imported_count, failed_count, errors}`

##### 3.2.4 学术会议管理接口
1. **获取学术会议列表接口**
   - 路径：`/api/admin/academic-meetings`
   - 方法：GET
   - 参数：查询参数：`{page, per_page, search, sort_by, sort_order}`
   - 响应：学术会议列表和分页信息

2. **创建学术会议接口**
   - 路径：`/api/admin/academic-meetings`
   - 方法：POST
   - 参数：学术会议信息
   - 响应：`{success, meeting}`

3. **更新学术会议接口**
   - 路径：`/api/admin/academic-meetings/:id`
   - 方法：PUT
   - 参数：更新的学术会议信息
   - 响应：`{success}`

4. **删除学术会议接口**
   - 路径：`/api/admin/academic-meetings/:id`
   - 方法：DELETE
   - 参数：学术会议ID（路径参数）
   - 响应：`{success}`

5. **批量导入学术会议接口**
   - 路径：`/api/admin/academic-meetings/import`
   - 方法：POST
   - 参数：文件上传
   - 响应：`{success, imported_count, failed_count, errors}`

6. **导出学术会议接口**
   - 路径：`/api/admin/academic-meetings/export`
   - 方法：GET
   - 参数：查询参数：`{search, sort_by, sort_order}`
   - 响应：Excel文件下载

##### 3.2.5 报名信息管理接口
1. **获取报名列表接口**
   - 路径：`/api/admin/registrations`
   - 方法：GET
   - 参数：查询参数：`{meeting_id, page, per_page, search, sort_by, sort_order}`
   - 响应：报名列表和分页信息

2. **获取报名详情接口**
   - 路径：`/api/admin/registrations/:id`
   - 方法：GET
   - 参数：报名ID（路径参数）
   - 响应：报名详细信息

3. **更新报名审核状态接口**
   - 路径：`/api/admin/registrations/:id/status`
   - 方法：PUT
   - 参数：`{status, remark}`
   - 响应：`{success}`

4. **导出报名信息接口**
   - 路径：`/api/admin/registrations/export`
   - 方法：GET
   - 参数：查询参数：`{meeting_id, search, sort_by, sort_order}`
   - 响应：Excel文件下载

##### 3.2.6 履职统计接口
1. **获取个人履职统计列表接口**
   - 路径：`/api/admin/statistics/personal`
   - 方法：GET
   - 参数：查询参数：`{page, per_page, search, start_date, end_date, sort_by, sort_order}`
   - 响应：个人履职统计列表和分页信息

2. **获取个人履职详情接口**
   - 路径：`/api/admin/statistics/personal/:user_id`
   - 方法：GET
   - 参数：
     - 用户ID（路径参数）
     - 查询参数：`{start_date, end_date}`
   - 响应：用户信息和参会记录列表

3. **导出个人履职统计接口**
   - 路径：`/api/admin/statistics/personal/export`
   - 方法：GET
   - 参数：查询参数：`{search, start_date, end_date, sort_by, sort_order}`
   - 响应：Excel文件下载

4. **获取会议履职统计列表接口**
   - 路径：`/api/admin/statistics/meetings`
   - 方法：GET
   - 参数：查询参数：`{page, per_page, search, start_date, end_date, type, sort_by, sort_order}`
   - 响应：会议履职统计列表和分页信息

5. **获取会议履职详情接口**
   - 路径：`/api/admin/statistics/meetings/:meeting_id`
   - 方法：GET
   - 参数：会议ID（路径参数）
   - 响应：会议信息、统计数据和参会人员列表

6. **导出会议履职统计接口**
   - 路径：`/api/admin/statistics/meetings/export`
   - 方法：GET
   - 参数：查询参数：`{search, start_date, end_date, type, sort_by, sort_order}`
   - 响应：Excel文件下载

7. **导出会议参会人员接口**
   - 路径：`/api/admin/statistics/meetings/:meeting_id/attendees/export`
   - 方法：GET
   - 参数：会议ID（路径参数）
   - 响应：Excel文件下载

### 4. 数据库设计

#### 4.1 用户表（users）
```sql
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(50) NOT NULL,
  phone VARCHAR(20) NOT NULL UNIQUE,
  password VARCHAR(100),
  role VARCHAR(20) NOT NULL CHECK (role IN ('理事', '常务理事', '监事', '分支机构负责人', '地方学会负责人')),
  work_unit VARCHAR(100) NOT NULL,
  work_position VARCHAR(50) NOT NULL,
  society_position VARCHAR(50) NOT NULL,
  last_login_at TIMESTAMP,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  is_deleted BOOLEAN NOT NULL DEFAULT FALSE
);
```

#### 4.2 管理员表（admins）
```sql
CREATE TABLE admins (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  username VARCHAR(50) NOT NULL UNIQUE,
  password VARCHAR(100) NOT NULL,
  name VARCHAR(50) NOT NULL,
  last_login_at TIMESTAMP,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  is_deleted BOOLEAN NOT NULL DEFAULT FALSE
);
```

#### 4.3 会议表（meetings）
```sql
CREATE TABLE meetings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  type VARCHAR(20) NOT NULL CHECK (type IN ('理事会议', '常务理事会议', '学术会议')),
  form VARCHAR(20) NOT NULL CHECK (form IN ('线下会议', '线上会议')),
  name VARCHAR(100) NOT NULL,
  start_time TIMESTAMP NOT NULL,
  end_time TIMESTAMP NOT NULL,
  location VARCHAR(200) NOT NULL,
  qr_code TEXT,
  is_registration_open BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT check_meeting_time CHECK (end_time >= start_time)
);
```

#### 4.4 学术会议表（academic_meetings）
```sql
CREATE TABLE academic_meetings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL,
  start_time TIMESTAMP NOT NULL,
  end_time TIMESTAMP NOT NULL,
  location VARCHAR(200) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT check_meeting_time CHECK (end_time >= start_time)
);
```

#### 4.5 报名表（registrations）
```sql
CREATE TABLE registrations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  meeting_id UUID NOT NULL REFERENCES meetings(id),
  name VARCHAR(50) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  work_unit VARCHAR(100) NOT NULL,
  work_position VARCHAR(50) NOT NULL,
  society_position VARCHAR(50) NOT NULL,
  user_id UUID REFERENCES users(id),
  attend_type VARCHAR(20) NOT NULL CHECK (attend_type IN ('本人出席', '委托代表出席')),
  delegate_name VARCHAR(50),
  delegate_phone VARCHAR(20),
  delegate_unit VARCHAR(100),
  delegate_position VARCHAR(50),
  status VARCHAR(20) NOT NULL DEFAULT '待审核' CHECK (status IN ('待审核', '已通过', '已拒绝')),
  remark TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT check_delegate_info CHECK (
    (attend_type = '本人出席') OR 
    (attend_type = '委托代表出席' AND 
     delegate_name IS NOT NULL AND 
     delegate_phone IS NOT NULL AND 
     delegate_unit IS NOT NULL AND 
     delegate_position IS NOT NULL)
  )
);
```

#### 4.6 操作日志表（operation_logs）
```sql
CREATE TABLE operation_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID,
  admin_id UUID,
  action VARCHAR(50) NOT NULL,
  target VARCHAR(50) NOT NULL,
  details JSONB,
  ip_address VARCHAR(50),
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT check_user_or_admin CHECK (
    (user_id IS NULL AND admin_id IS NOT NULL) OR 
    (user_id IS NOT NULL AND admin_id IS NULL)
  ),
  CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id),
  CONSTRAINT fk_admin FOREIGN KEY (admin_id) REFERENCES admins(id)
);
```

## 一、现有问题分析

### 1. 代码冗余问题
1. **表单组件重复实现**
   - 移动端的报名表单逻辑直接在各页面组件中实现，例如 `registration/index.jsx` 中的表单处理逻辑
   - 缺乏统一的表单组件抽象，导致相似的验证和处理逻辑在不同页面重复
   - 表单状态管理分散，每个页面单独维护表单状态

2. **样式定义分散**
   - CSS样式文件分散，部分使用了 module.css，但仍有部分在 App.css 中定义
   - 缺少统一的设计令牌系统，样式变量重复定义
   - 存在内联样式和模块化样式混用的情况

3. **模拟数据硬编码**
   - 会议数据、用户数据等直接硬编码在组件内部，如 Statistics/index.jsx 中的 mockStatistics 和 mockMeetings
   - 没有统一的模拟数据层或服务接口，各页面独立维护模拟数据
   - 数据格式不一致，分散在不同组件，如成功页面和报名页面的数据结构不完全一致
   - 页面间数据传递依赖于 React Router 的 state，导致刷新后数据丢失

### 2. 架构问题
1. **状态管理不统一**
   - 混合使用本地状态(useState)和localStorage存储，如 Statistics/index.jsx 中从 localStorage 获取用户信息
   - 缺乏统一的状态管理策略，导致状态逻辑分散
   - 用户认证状态存储在 localStorage 中，没有专门的认证上下文管理

2. **路由配置问题**
   - 路由配置分散，缺少中心化的路由管理
   - 直接在页面组件中使用硬编码的路径进行导航
   - 缺少路由参数验证和路由守卫机制

3. **错误处理机制不统一**
   - 表单验证采用浏览器原生验证，缺少统一的错误显示和处理
   - 异常处理简单使用 try-catch，没有全局异常处理机制
   - 网络请求错误只通过 console.error 和简单的 alert 提示用户

4. **API调用层缺失**
   - 没有实现API调用服务层，目前使用模拟数据和 setTimeout 模拟API调用
   - 缺少统一的数据获取和更新逻辑
   - 组件直接从 localStorage 获取数据或使用硬编码数据

### 3. 其他技术细节
1. **移动端适配不完善**
   - 部分组件使用固定像素值，可能在不同设备上展示不一致
   - 响应式设计不够系统化，缺少断点管理

2. **项目结构不合理**
   - 部分页面组件过于臃肿，如 registration/index.jsx 和 Statistics/index.jsx
   - 未充分分离业务逻辑和UI渲染逻辑
   - 缺少共享组件的有效复用，例如表单控件和卡片组件

3. **缺少必要的加载状态处理**
   - 数据加载状态处理不完善，缺少加载指示器
   - 表单提交过程中缺少视觉反馈
   - 无数据状态的展示处理简单

4. **依赖管理问题**
   - 移动端和管理端项目完全分离，缺少共享代码机制
   - 项目依赖版本可能不一致，移动端使用 .jsx 而管理端同时使用 .jsx 和 .tsx

## 二、重构方案

### 1. 前期规划与设计
1. **需求梳理与系统设计**
   - 根据当前页面功能，完善用户流程图和交互设计
   - 重新设计前后端交互模式，基于已有的Supabase架构
   - 完善API接口规范，确保前后端一致性

2. **技术栈优化**
   - 前端框架：保持React 18，确保移动端和管理端版本一致
   - 状态管理：引入React Context + useReducer管理全局状态
   - UI组件：抽象和封装现有组件，构建组件库
   - CSS解决方案：统一使用CSS Modules，引入变量系统
   - 后端服务：维持Supabase架构，完善API接口实现

3. **项目结构优化**
   - 统一移动端(lvyue-wap)和管理端(lvyue-admin)的代码组织结构
   - 设计共享代码策略，提取公共模块
   - 重新组织组件结构，按照功能和业务场景划分

### 2. 代码结构与组织
1. **组件设计优化**
   - 将页面组件(如registration/index.jsx)拆分为多个小型组件
   - 抽象共享组件，如表单控件、卡片组件
   - 分离业务逻辑和UI渲染，提高组件可测试性和可维护性

2. **状态管理策略**
   - 设计认证上下文(AuthContext)，管理用户登录状态和信息
   - 使用React Context管理全局状态，如用户信息、会议列表等
   - 封装自定义hooks管理业务逻辑，如useForm、useMeeting等

3. **API服务层**
   - 建立统一的API服务，处理与Supabase的交互
   - 实现请求拦截器，处理认证token和错误
   - 为开发环境创建一致的模拟数据服务，与真实API接口保持一致

### 3. 前端实现
1. **样式系统**
   - 基于现有样式，构建设计令牌系统(Design Tokens)
   - 将App.css中的全局样式拆分为模块化样式
   - 使用CSS变量实现主题和样式统一管理

2. **表单封装**
   - 基于registration/index.jsx中的表单逻辑，抽象表单hooks
   - 创建表单组件库，包含Input、Select、Button等组件
   - 实现统一的表单验证和错误显示机制

3. **路由配置**
   - 集中管理路由配置，实现路由懒加载
   - 使用路由守卫处理认证和权限控制
   - 优化URL参数传递，减少对React Router state的依赖

4. **错误处理与状态管理**
   - 实现全局错误边界组件，统一处理异常
   - 为异步操作设计统一的加载状态管理
   - 优化表单和API错误的显示和处理方式

### 4. 性能优化与用户体验
1. **代码分割与懒加载**
   - 对大型页面组件使用React.lazy实现懒加载
   - 优化CSS和JavaScript资源的加载策略

2. **移动端适配优化**
   - 建立响应式设计系统，使用相对单位替代固定像素
   - 优化移动设备的交互体验，包括触摸反馈和表单控件尺寸

3. **加载状态与过渡动画**
   - 为数据加载添加骨架屏或加载指示
   - 优化页面间转场效果，提升用户体验
   - 改进表单提交状态的视觉反馈

## 三、具体实现示例

### 1. 项目结构优化
```
src/
├── assets/         # 静态资源
├── components/     # 公共组件
│   ├── common/     # 基础UI组件
│   │   ├── Button/
│   │   ├── Input/
│   │   ├── Select/
│   │   └── Card/
│   ├── form/       # 表单相关组件
│   └── layout/     # 布局组件
├── contexts/       # 上下文管理
│   ├── AuthContext.jsx    # 认证上下文
│   └── MeetingContext.jsx # 会议数据上下文
├── hooks/          # 自定义钩子
│   ├── useForm.jsx        # 表单管理
│   ├── useMeeting.jsx     # 会议数据
│   └── useAuth.jsx        # 认证管理
├── pages/          # 页面组件
│   ├── Login/             # 登录页
│   ├── Home/              # 首页
│   ├── Registration/      # 报名页
│   │   ├── index.jsx            # 主页面
│   │   ├── components/          # 页面级组件
│   │   │   ├── MeetingInfo.jsx  # 会议信息组件
│   │   │   └── DelegateForm.jsx # 委托表单组件
│   │   └── hooks/               # 页面级钩子
│   │       └── useRegistration.jsx # 报名逻辑钩子
│   ├── Success/           # 成功页
│   └── Statistics/        # 履职统计
│       ├── index.jsx
│       └── components/
│           └── MeetingCard.jsx  # 会议卡片组件
├── services/       # API服务
│   ├── api/               # API实现
│   │   ├── auth.js        # 认证相关
│   │   ├── meetings.js    # 会议相关
│   │   └── registration.js # 报名相关
│   └── mock/              # 模拟数据服务
│       ├── auth.js
│       ├── meetings.js
│       └── registration.js
├── styles/         # 样式相关
│   ├── variables.css       # CSS变量定义
│   └── common.css          # 通用样式
├── utils/          # 工具函数
│   ├── validation.js      # 表单验证
│   ├── formatters.js      # 数据格式化
│   └── storage.js         # 本地存储
├── router/         # 路由配置
│   └── index.jsx          # 路由定义
├── App.jsx         # 应用入口
└── main.jsx        # 主入口文件
```

### 2. 认证上下文实现
```jsx
// contexts/AuthContext.jsx
import React, { createContext, useReducer, useEffect } from 'react';
import { authService } from '../services/api/auth';

// 创建上下文
export const AuthContext = createContext();

// 初始状态
const initialState = {
  isAuthenticated: false,
  user: null,
  loading: true,
  error: null
};

// 状态管理reducer
function authReducer(state, action) {
  switch (action.type) {
    case 'AUTH_INIT':
      return { ...state, loading: true, error: null };
    case 'AUTH_SUCCESS':
      return {
        ...state,
        isAuthenticated: true,
        user: action.payload,
        loading: false,
        error: null
      };
    case 'AUTH_FAILURE':
      return {
        ...state,
        isAuthenticated: false,
        user: null,
        loading: false,
        error: action.payload
      };
    case 'AUTH_LOGOUT':
      return {
        ...state,
        isAuthenticated: false,
        user: null,
        loading: false,
        error: null
      };
    default:
      return state;
  }
}

// 上下文提供者组件
export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // 检查登录状态
  useEffect(() => {
    const checkAuth = async () => {
      const token = localStorage.getItem('token');
      
      if (!token) {
        dispatch({ type: 'AUTH_FAILURE' });
        return;
      }
      
      try {
        dispatch({ type: 'AUTH_INIT' });
        const userData = await authService.checkAuth();
        dispatch({ type: 'AUTH_SUCCESS', payload: userData });
      } catch (error) {
        dispatch({ type: 'AUTH_FAILURE', payload: error.message });
        localStorage.removeItem('token');
      }
    };
    
    checkAuth();
  }, []);

  // 登录方法
  const login = async (credentials) => {
    try {
      dispatch({ type: 'AUTH_INIT' });
      const { user, token } = await authService.login(credentials);
      localStorage.setItem('token', token);
      dispatch({ type: 'AUTH_SUCCESS', payload: user });
      return true;
    } catch (error) {
      dispatch({ type: 'AUTH_FAILURE', payload: error.message });
      return false;
    }
  };

  // 退出登录方法
  const logout = async () => {
    try {
      await authService.logout();
      localStorage.removeItem('token');
      dispatch({ type: 'AUTH_LOGOUT' });
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  return (
    <AuthContext.Provider value={{ ...state, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};
```

### 3. 表单钩子实现
```jsx
// hooks/useForm.jsx
import { useState, useCallback } from 'react';

export const useForm = (initialValues, validate) => {
  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // 处理输入变化
  const handleChange = useCallback((e) => {
    const { name, value } = e.target;
    setValues(prev => ({ ...prev, [name]: value }));
    
    // 如果字段已被触碰过，则实时验证
    if (touched[name]) {
      validateField(name, value);
    }
  }, [touched]);
  
  // 处理字段失焦
  const handleBlur = useCallback((e) => {
    const { name } = e.target;
    setTouched(prev => ({ ...prev, [name]: true }));
    validateField(name, values[name]);
  }, [values]);
  
  // 验证单个字段
  const validateField = useCallback((name, value) => {
    if (!validate) return null;
    
    const fieldError = validate[name] ? validate[name](value, values) : null;
    setErrors(prev => ({ ...prev, [name]: fieldError }));
    return !fieldError;
  }, [values, validate]);
  
  // 验证整个表单
  const validateForm = useCallback(() => {
    if (!validate) return true;
    
    const formErrors = {};
    let isValid = true;
    
    Object.keys(values).forEach(key => {
      if (validate[key]) {
        const error = validate[key](values[key], values);
        if (error) {
          formErrors[key] = error;
          isValid = false;
        }
      }
    });
    
    setErrors(formErrors);
    // 标记所有字段为已触碰
    const allTouched = Object.keys(values).reduce((obj, key) => {
      obj[key] = true;
      return obj;
    }, {});
    setTouched(allTouched);
    
    return isValid;
  }, [values, validate]);
  
  // 提交表单
  const handleSubmit = useCallback(async (onSubmit) => {
    setIsSubmitting(true);
    
    try {
      const isValid = validateForm();
      if (!isValid) {
        setIsSubmitting(false);
        return false;
      }
      
      await onSubmit(values);
      return true;
    } catch (error) {
      console.error('Form submission error:', error);
      return false;
    } finally {
      setIsSubmitting(false);
    }
  }, [values, validateForm]);
  
  // 重置表单
  const resetForm = useCallback(() => {
    setValues(initialValues);
    setErrors({});
    setTouched({});
    setIsSubmitting(false);
  }, [initialValues]);
  
  return {
    values,
    errors,
    touched,
    isSubmitting,
    handleChange,
    handleBlur,
    handleSubmit,
    resetForm,
    setValues
  };
};
```

### 4. API服务实现
```jsx
// services/api/client.js
import { supabase } from './supabase';

// 创建API客户端
const createClient = () => {
  // 添加认证token到请求
  const getAuthHeaders = () => {
    const token = localStorage.getItem('token');
    return token ? { Authorization: `Bearer ${token}` } : {};
  };
  
  // 基础请求方法
  const request = async ({ table, method, path, data, query }) => {
    try {
      let request;
      
      switch (method) {
        case 'GET':
          request = supabase.from(table).select(query || '*');
          break;
        case 'GET_ONE':
          request = supabase.from(table).select(query || '*').eq('id', path).single();
          break;
        case 'POST':
          request = supabase.from(table).insert([data]).select();
          break;
        case 'PUT':
          request = supabase.from(table).update(data).eq('id', path).select();
          break;
        case 'DELETE':
          request = supabase.from(table).delete().eq('id', path);
          break;
        default:
          throw new Error(`Unsupported method: ${method}`);
      }
      
      const { data: responseData, error } = await request;
      
      if (error) throw error;
      
      return method === 'POST' ? responseData[0] : responseData;
    } catch (error) {
      console.error(`API error: ${method} ${table}/${path}`, error);
      throw error;
    }
  };
  
  return { request };
};

export const apiClient = createClient();

// services/api/meetings.js
import { apiClient } from './client';

export const meetingsService = {
  // 获取会议详情
  getMeeting: (id) => {
    return apiClient.request({
      table: 'meetings',
      method: 'GET_ONE',
      path: id
    });
  },
  
  // 获取会议列表
  getMeetings: (params = {}) => {
    let query = '*';
    
    return apiClient.request({
      table: 'meetings',
      method: 'GET',
      query
    });
  },
  
  // 创建会议报名
  createRegistration: (registrationData) => {
    return apiClient.request({
      table: 'registrations',
      method: 'POST',
      data: registrationData
    });
  }
};
```

### 5. 移动端报名页面重构
```jsx
// pages/Registration/index.jsx
import React from 'react';
import { useParams } from 'react-router-dom';
import { useRegistration } from './hooks/useRegistration';
import MeetingInfo from './components/MeetingInfo';
import RoleSelector from '../../components/form/RoleSelector';
import BasicInfoForm from './components/BasicInfoForm';
import DelegateForm from './components/DelegateForm';
import SubmitButton from '../../components/common/Button/SubmitButton';
import styles from './Registration.module.css';

const RegistrationPage = () => {
  const { meetingId } = useParams();
  const {
    loading,
    meeting,
    formState,
    step,
    canDelegate,
    handleRoleSelect,
    handleInputChange,
    handleBlur,
    handleAttendTypeChange,
    handleSubmit
  } = useRegistration(meetingId);
  
  if (loading) {
    return <div className={styles.loading}>加载中...</div>;
  }
  
  return (
    <div className={styles.container}>
      {/* 会议信息卡片 */}
      <MeetingInfo meeting={meeting} />
      
      {/* 报名表单 */}
      <div className={styles.formContainer}>
        <h2 className={styles.formTitle}>报名信息</h2>
        
        <form onSubmit={handleSubmit}>
          {/* 角色选择 */}
          <RoleSelector
            value={formState.values.role}
            onChange={handleRoleSelect}
            error={formState.errors.role}
          />
          
          {step === 'form' && (
            <>
              {/* 基本信息表单 */}
              <BasicInfoForm
                values={formState.values}
                errors={formState.errors}
                touched={formState.touched}
                onChange={handleInputChange}
                onBlur={handleBlur}
              />
              
              {/* 出席方式与委托表单 */}
              {canDelegate && (
                <>
                  <div className={styles.formItem}>
                    <label>出席方式</label>
                    <select
                      name="attendType"
                      value={formState.values.attendType}
                      onChange={handleAttendTypeChange}
                      className={styles.select}
                    >
                      <option value="本人出席">本人出席</option>
                      <option value="委托代表">委托代表出席</option>
                    </select>
                  </div>
                  
                  {formState.values.attendType === '委托代表' && (
                    <DelegateForm
                      values={formState.values}
                      errors={formState.errors}
                      touched={formState.touched}
                      onChange={handleInputChange}
                      onBlur={handleBlur}
                    />
                  )}
                </>
              )}
              
              {/* 提交按钮 */}
              <SubmitButton
                isSubmitting={formState.isSubmitting}
                text="提交报名"
                loadingText="提交中..."
              />
            </>
          )}
        </form>
      </div>
    </div>
  );
};

export default RegistrationPage;

// pages/Registration/hooks/useRegistration.jsx
import { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from '../../../hooks/useForm';
import { meetingsService } from '../../../services/api/meetings';
import { formValidation } from '../../../utils/validation';

export const useRegistration = (meetingId) => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [meeting, setMeeting] = useState(null);
  const [step, setStep] = useState('role');
  
  // 初始化表单
  const formState = useForm(
    {
      role: '',
      name: '',
      phone: '',
      workUnit: '',
      workPosition: '',
      societyPosition: '',
      attendType: '本人出席',
      delegateName: '',
      delegatePhone: '',
      delegateUnit: '',
      delegatePosition: ''
    },
    formValidation
  );
  
  // 加载会议数据
  useEffect(() => {
    const fetchMeeting = async () => {
      try {
        setLoading(true);
        const data = await meetingsService.getMeeting(meetingId);
        setMeeting(data);
      } catch (error) {
        console.error('Failed to fetch meeting:', error);
      } finally {
        setLoading(false);
      }
    };
    
    if (meetingId) {
      fetchMeeting();
    }
  }, [meetingId]);
  
  // 判断是否可以委托出席
  const canDelegate = ['director', 'standing_director', 'supervisor'].includes(formState.values.role);
  
  // 处理角色选择
  const handleRoleSelect = useCallback((e) => {
    const value = e.target.value;
    formState.handleChange(e);
    
    if (value) {
      setStep('form');
    } else {
      setStep('role');
    }
  }, [formState]);
  
  // 处理出席方式变更
  const handleAttendTypeChange = useCallback((e) => {
    formState.handleChange(e);
    
    // 如果切换到本人出席，清空委托信息
    if (e.target.value === '本人出席') {
      formState.setValues(prev => ({
        ...prev,
        delegateName: '',
        delegatePhone: '',
        delegateUnit: '',
        delegatePosition: ''
      }));
    }
  }, [formState]);
  
  // 处理表单提交
  const handleSubmit = useCallback(async (e) => {
    e.preventDefault();
    
    const success = await formState.handleSubmit(async (values) => {
      // 构建报名数据
      const registrationData = {
        meeting_id: meetingId,
        name: values.name,
        phone: values.phone,
        work_unit: values.workUnit,
        work_position: values.workPosition,
        society_position: values.societyPosition,
        attend_type: values.attendType,
        delegate_name: values.delegateName,
        delegate_phone: values.delegatePhone,
        delegate_unit: values.delegateUnit,
        delegate_position: values.delegatePosition
      };
      
      // 提交报名
      const result = await meetingsService.createRegistration(registrationData);
      return result;
    });
    
    if (success) {
      // 跳转到成功页面，传递会议信息和报名信息
      navigate('/success', { 
        state: { 
          meetingInfo: meeting,
          formData: formState.values
        } 
      });
    }
  }, [meetingId, meeting, formState, navigate]);
  
  return {
    loading,
    meeting,
    formState,
    step,
    canDelegate,
    handleRoleSelect,
    handleInputChange: formState.handleChange,
    handleBlur: formState.handleBlur,
    handleAttendTypeChange,
    handleSubmit
  };
};
```

## 四、实施建议

1. **分阶段实施**
   - 第一阶段：抽象共享组件和基础服务层
   - 第二阶段：实现状态管理和API服务
   - 第三阶段：重构页面组件和业务逻辑
   - 第四阶段：性能优化和体验提升

2. **保持兼容性**
   - 在重构过程中保持对现有页面和功能的兼容
   - 逐步替换硬编码数据为API服务调用

3. **测试策略**
   - 为重构的组件和服务编写单元测试
   - 进行端到端测试确保功能完整性

4. **文档和知识共享**
   - 及时更新项目文档
   - 完善API接口文档和组件使用说明

通过以上优化方案，可以显著提高代码质量、开发效率和用户体验，构建一个更加健壮、易于维护的履职系统。 